
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000007be  00000852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b8  008000b8  000008aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b73  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b90  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e66  00000000  00000000  000031ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00004014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c44  00000000  00000000  00004935  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005579  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 03 	call	0x758	; 0x758 <main>
  8a:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delaycounter>:
  92:	81 e1       	ldi	r24, 0x11	; 17
  94:	97 e2       	ldi	r25, 0x27	; 39
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <delaycounter+0x4>
  9a:	08 95       	ret

0000009c <DIO_SetPinDir>:
		case DIO_PORTC :
		Toggle_BIT(PORTC , Pin);
		break;
		
		case DIO_PORTD :
		Toggle_BIT(PORTD , Pin);
  9c:	44 23       	and	r20, r20
  9e:	b9 f1       	breq	.+110    	; 0x10e <DIO_SetPinDir+0x72>
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_SetPinDir+0xa>
  a4:	6b c0       	rjmp	.+214    	; 0x17c <DIO_SetPinDir+0xe0>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	89 f0       	breq	.+34     	; 0xcc <DIO_SetPinDir+0x30>
  aa:	28 f0       	brcs	.+10     	; 0xb6 <DIO_SetPinDir+0x1a>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	c9 f0       	breq	.+50     	; 0xe2 <DIO_SetPinDir+0x46>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	11 f1       	breq	.+68     	; 0xf8 <DIO_SetPinDir+0x5c>
  b4:	08 95       	ret
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPinDir+0x26>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPinDir+0x22>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	27 b3       	in	r18, 0x17	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPinDir+0x3c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPinDir+0x38>
  dc:	82 2b       	or	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
  e2:	24 b3       	in	r18, 0x14	; 20
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_SetPinDir+0x52>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_SetPinDir+0x4e>
  f2:	82 2b       	or	r24, r18
  f4:	84 bb       	out	0x14, r24	; 20
  f6:	08 95       	ret
  f8:	21 b3       	in	r18, 0x11	; 17
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDir+0x68>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDir+0x64>
 108:	82 2b       	or	r24, r18
 10a:	81 bb       	out	0x11, r24	; 17
 10c:	08 95       	ret
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <DIO_SetPinDir+0x9a>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_SetPinDir+0x82>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d9 f0       	breq	.+54     	; 0x14e <DIO_SetPinDir+0xb2>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f1       	breq	.+74     	; 0x166 <DIO_SetPinDir+0xca>
 11c:	08 95       	ret
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0x8e>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0x8a>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xa6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xa2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDir+0xbe>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDir+0xba>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDir+0xd6>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDir+0xd2>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_SetPinValue>:
 17e:	44 23       	and	r20, r20
 180:	b9 f1       	breq	.+110    	; 0x1f0 <DIO_SetPinValue+0x72>
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <DIO_SetPinValue+0xa>
 186:	6b c0       	rjmp	.+214    	; 0x25e <DIO_SetPinValue+0xe0>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	89 f0       	breq	.+34     	; 0x1ae <DIO_SetPinValue+0x30>
 18c:	28 f0       	brcs	.+10     	; 0x198 <DIO_SetPinValue+0x1a>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	c9 f0       	breq	.+50     	; 0x1c4 <DIO_SetPinValue+0x46>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	11 f1       	breq	.+68     	; 0x1da <DIO_SetPinValue+0x5c>
 196:	08 95       	ret
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinValue+0x26>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinValue+0x22>
 1a8:	82 2b       	or	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPinValue+0x3c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPinValue+0x38>
 1be:	82 2b       	or	r24, r18
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
 1c4:	25 b3       	in	r18, 0x15	; 21
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_SetPinValue+0x52>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_SetPinValue+0x4e>
 1d4:	82 2b       	or	r24, r18
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	08 95       	ret
 1da:	22 b3       	in	r18, 0x12	; 18
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SetPinValue+0x68>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SetPinValue+0x64>
 1ea:	82 2b       	or	r24, r18
 1ec:	82 bb       	out	0x12, r24	; 18
 1ee:	08 95       	ret
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	91 f0       	breq	.+36     	; 0x218 <DIO_SetPinValue+0x9a>
 1f4:	28 f0       	brcs	.+10     	; 0x200 <DIO_SetPinValue+0x82>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	d9 f0       	breq	.+54     	; 0x230 <DIO_SetPinValue+0xb2>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	29 f1       	breq	.+74     	; 0x248 <DIO_SetPinValue+0xca>
 1fe:	08 95       	ret
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0x8e>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0x8a>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	8b bb       	out	0x1b, r24	; 27
 216:	08 95       	ret
 218:	28 b3       	in	r18, 0x18	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0xa6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0xa2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	08 95       	ret
 230:	25 b3       	in	r18, 0x15	; 21
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPinValue+0xbe>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPinValue+0xba>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	85 bb       	out	0x15, r24	; 21
 246:	08 95       	ret
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPinValue+0xd6>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPinValue+0xd2>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	82 bb       	out	0x12, r24	; 18
 25e:	08 95       	ret

00000260 <DIO_ReadPinValue>:
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	89 f0       	breq	.+34     	; 0x286 <DIO_ReadPinValue+0x26>
 264:	28 f0       	brcs	.+10     	; 0x270 <DIO_ReadPinValue+0x10>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	c9 f0       	breq	.+50     	; 0x29c <DIO_ReadPinValue+0x3c>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	11 f1       	breq	.+68     	; 0x2b2 <DIO_ReadPinValue+0x52>
 26e:	08 95       	ret
 270:	89 b3       	in	r24, 0x19	; 25
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_ReadPinValue+0x1a>
 276:	95 95       	asr	r25
 278:	87 95       	ror	r24
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_ReadPinValue+0x16>
 27e:	81 70       	andi	r24, 0x01	; 1
 280:	fa 01       	movw	r30, r20
 282:	80 83       	st	Z, r24
 284:	08 95       	ret
 286:	86 b3       	in	r24, 0x16	; 22
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_ReadPinValue+0x30>
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_ReadPinValue+0x2c>
 294:	81 70       	andi	r24, 0x01	; 1
 296:	fa 01       	movw	r30, r20
 298:	80 83       	st	Z, r24
 29a:	08 95       	ret
 29c:	83 b3       	in	r24, 0x13	; 19
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_ReadPinValue+0x46>
 2a2:	95 95       	asr	r25
 2a4:	87 95       	ror	r24
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_ReadPinValue+0x42>
 2aa:	81 70       	andi	r24, 0x01	; 1
 2ac:	fa 01       	movw	r30, r20
 2ae:	80 83       	st	Z, r24
 2b0:	08 95       	ret
 2b2:	80 b3       	in	r24, 0x10	; 16
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_ReadPinValue+0x5c>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_ReadPinValue+0x58>
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	fa 01       	movw	r30, r20
 2c4:	80 83       	st	Z, r24
 2c6:	08 95       	ret

000002c8 <DIO_SetPullUp>:
	}
}

void DIO_SetPullUp(uint8 Port, uint8 Pin)
{
	switch(Port)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	89 f0       	breq	.+34     	; 0x2ee <DIO_SetPullUp+0x26>
 2cc:	28 f0       	brcs	.+10     	; 0x2d8 <DIO_SetPullUp+0x10>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	c9 f0       	breq	.+50     	; 0x304 <DIO_SetPullUp+0x3c>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	11 f1       	breq	.+68     	; 0x31a <DIO_SetPullUp+0x52>
 2d6:	08 95       	ret
	{
		case DIO_PORTA :
		SET_BIT(PORTA , Pin);
 2d8:	2b b3       	in	r18, 0x1b	; 27
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_SetPullUp+0x1c>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_SetPullUp+0x18>
 2e8:	82 2b       	or	r24, r18
 2ea:	8b bb       	out	0x1b, r24	; 27
		break;
 2ec:	08 95       	ret
		
		case DIO_PORTB :
		SET_BIT(PORTB , Pin);
 2ee:	28 b3       	in	r18, 0x18	; 24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_SetPullUp+0x32>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_SetPullUp+0x2e>
 2fe:	82 2b       	or	r24, r18
 300:	88 bb       	out	0x18, r24	; 24
		break;
 302:	08 95       	ret
		
		case DIO_PORTC :
		SET_BIT(PORTC , Pin);
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPullUp+0x48>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPullUp+0x44>
 314:	82 2b       	or	r24, r18
 316:	85 bb       	out	0x15, r24	; 21
		break;
 318:	08 95       	ret
		
		case DIO_PORTD :
		SET_BIT(PORTD , Pin);
 31a:	22 b3       	in	r18, 0x12	; 18
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_SetPullUp+0x5e>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_SetPullUp+0x5a>
 32a:	82 2b       	or	r24, r18
 32c:	82 bb       	out	0x12, r24	; 18
 32e:	08 95       	ret

00000330 <KeyPad_Init>:
							 {'c' , '0' , '=' , '+' }} ;
								 

void KeyPad_Init(void)
{
	DIO_SetPinDir(KEYPAD_COL_PORT , KEYPAD_COL0 , DIO_PIN_OUTPUT);
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_COL_PORT , KEYPAD_COL1 , DIO_PIN_OUTPUT);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_COL_PORT , KEYPAD_COL2 , DIO_PIN_OUTPUT);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_COL_PORT , KEYPAD_COL3 , DIO_PIN_OUTPUT);
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	
	DIO_SetPinDir(KEYPAD_ROW_PORT , KEYPAD_ROW0 , DIO_PIN_INPUT);
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	64 e0       	ldi	r22, 0x04	; 4
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT , KEYPAD_ROW1 , DIO_PIN_INPUT);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	65 e0       	ldi	r22, 0x05	; 5
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT , KEYPAD_ROW2 , DIO_PIN_INPUT);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	66 e0       	ldi	r22, 0x06	; 6
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT , KEYPAD_ROW3 , DIO_PIN_INPUT);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	67 e0       	ldi	r22, 0x07	; 7
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
	
	DIO_SetPinValue(KEYPAD_COL_PORT , KEYPAD_COL0 , DIO_PIN_HIGH);
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_COL_PORT , KEYPAD_COL1 , DIO_PIN_HIGH);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_COL_PORT , KEYPAD_COL2 , DIO_PIN_HIGH);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_COL_PORT , KEYPAD_COL3 , DIO_PIN_HIGH);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	DIO_SetPullUp(KEYPAD_ROW_PORT , KEYPAD_ROW0);
 3a8:	64 e0       	ldi	r22, 0x04	; 4
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_ROW_PORT , KEYPAD_ROW1);
 3b0:	65 e0       	ldi	r22, 0x05	; 5
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_ROW_PORT , KEYPAD_ROW2);
 3b8:	66 e0       	ldi	r22, 0x06	; 6
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_ROW_PORT , KEYPAD_ROW3);
 3c0:	67 e0       	ldi	r22, 0x07	; 7
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPullUp>
 3c8:	08 95       	ret

000003ca <KeyPad_GetValue>:
	
}

uint8 KeyPad_GetValue(void)
{
 3ca:	bf 92       	push	r11
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	1f 92       	push	r1
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	uint8 Col_Loc = 0;
	uint8 Row_Loc = 0;
	
	uint8 Button_Value = 0;
	
	uint8 Temp = 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	89 83       	std	Y+1, r24	; 0x01
 3e6:	0f 2e       	mov	r0, r31
 3e8:	f0 e6       	ldi	r31, 0x60	; 96
 3ea:	cf 2e       	mov	r12, r31
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	df 2e       	mov	r13, r31
 3f0:	f0 2d       	mov	r31, r0
uint8 KeyPad_GetValue(void)
{
	uint8 Col_Loc = 0;
	uint8 Row_Loc = 0;
	
	uint8 Button_Value = 0;
 3f2:	b1 2c       	mov	r11, r1
	
	uint8 Temp = 1;
	
	for(Col_Loc = Col_INIT ; Col_Loc <= COL_FINAL ; Col_Loc++)
 3f4:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_SetPinValue(KEYPAD_ROW_PORT , Col_Loc , DIO_PIN_LOW);
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	60 2f       	mov	r22, r16
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 400:	76 01       	movw	r14, r12
		
		for(Row_Loc = ROW_INIT ; Row_Loc <= ROW_FINAL ; Row_Loc++)
 402:	14 e0       	ldi	r17, 0x04	; 4
		{
			 DIO_ReadPinValue(KEYPAD_ROW_PORT , Row_Loc , &Temp);
 404:	ae 01       	movw	r20, r28
 406:	4f 5f       	subi	r20, 0xFF	; 255
 408:	5f 4f       	sbci	r21, 0xFF	; 255
 40a:	61 2f       	mov	r22, r17
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ReadPinValue>
			
			if(Temp == 0)
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	81 11       	cpse	r24, r1
 416:	15 c0       	rjmp	.+42     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				Button_Value = KEYPAD_VALUES[Row_Loc-ROW_INIT][Col_Loc-Col_INIT];
 418:	f7 01       	movw	r30, r14
 41a:	b0 80       	ld	r11, Z
				
				while(Temp == 0)
				{
					 DIO_ReadPinValue(KEYPAD_ROW_PORT , Row_Loc , &Temp );
 41c:	ae 01       	movw	r20, r28
 41e:	4f 5f       	subi	r20, 0xFF	; 255
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	61 2f       	mov	r22, r17
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ReadPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42a:	ff ef       	ldi	r31, 0xFF	; 255
 42c:	26 e7       	ldi	r18, 0x76	; 118
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	f1 50       	subi	r31, 0x01	; 1
 432:	20 40       	sbci	r18, 0x00	; 0
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
			
			if(Temp == 0)
			{
				Button_Value = KEYPAD_VALUES[Row_Loc-ROW_INIT][Col_Loc-Col_INIT];
				
				while(Temp == 0)
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	88 23       	and	r24, r24
 440:	69 f3       	breq	.-38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	
	for(Col_Loc = Col_INIT ; Col_Loc <= COL_FINAL ; Col_Loc++)
	{
		DIO_SetPinValue(KEYPAD_ROW_PORT , Col_Loc , DIO_PIN_LOW);
		
		for(Row_Loc = ROW_INIT ; Row_Loc <= ROW_FINAL ; Row_Loc++)
 442:	1f 5f       	subi	r17, 0xFF	; 255
 444:	94 e0       	ldi	r25, 0x04	; 4
 446:	e9 0e       	add	r14, r25
 448:	f1 1c       	adc	r15, r1
 44a:	18 30       	cpi	r17, 0x08	; 8
 44c:	d9 f6       	brne	.-74     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				
				
			}
		}
		
		DIO_SetPinValue(KEYPAD_ROW_PORT , Col_Loc , DIO_PIN_HIGH);
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	60 2f       	mov	r22, r16
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	uint8 Button_Value = 0;
	
	uint8 Temp = 1;
	
	for(Col_Loc = Col_INIT ; Col_Loc <= COL_FINAL ; Col_Loc++)
 458:	0f 5f       	subi	r16, 0xFF	; 255
 45a:	ef ef       	ldi	r30, 0xFF	; 255
 45c:	ce 1a       	sub	r12, r30
 45e:	de 0a       	sbc	r13, r30
 460:	04 30       	cpi	r16, 0x04	; 4
 462:	49 f6       	brne	.-110    	; 0x3f6 <KeyPad_GetValue+0x2c>
		
		DIO_SetPinValue(KEYPAD_ROW_PORT , Col_Loc , DIO_PIN_HIGH);
		
	}
	 return Button_Value;
}
 464:	8b 2d       	mov	r24, r11
 466:	0f 90       	pop	r0
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	bf 90       	pop	r11
 47a:	08 95       	ret

0000047c <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 47c:	cf 93       	push	r28
 47e:	c8 2f       	mov	r28, r24
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	63 e0       	ldi	r22, 0x03	; 3
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 49e:	8b b3       	in	r24, 0x1b	; 27
 4a0:	9c 2f       	mov	r25, r28
 4a2:	90 7f       	andi	r25, 0xF0	; 240
 4a4:	8f 70       	andi	r24, 0x0F	; 15
 4a6:	89 2b       	or	r24, r25
 4a8:	8b bb       	out	0x1b, r24	; 27
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 4b4:	8f e9       	ldi	r24, 0x9F	; 159
 4b6:	9f e0       	ldi	r25, 0x0F	; 15
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_WriteCommand+0x3c>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_WriteCommand+0x42>
 4be:	00 00       	nop
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	63 e0       	ldi	r22, 0x03	; 3
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 4ca:	2b b3       	in	r18, 0x1b	; 27
 4cc:	30 e1       	ldi	r19, 0x10	; 16
 4ce:	c3 9f       	mul	r28, r19
 4d0:	c0 01       	movw	r24, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	92 2f       	mov	r25, r18
 4d6:	9f 70       	andi	r25, 0x0F	; 15
 4d8:	89 2b       	or	r24, r25
 4da:	8b bb       	out	0x1b, r24	; 27
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 4e6:	8f e3       	ldi	r24, 0x3F	; 63
 4e8:	9c e9       	ldi	r25, 0x9C	; 156
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_WriteCommand+0x6e>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_WriteCommand+0x74>
 4f0:	00 00       	nop
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 4fc:	8f e1       	ldi	r24, 0x1F	; 31
 4fe:	9e e4       	ldi	r25, 0x4E	; 78
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <LCD_WriteCommand+0x84>
 504:	00 c0       	rjmp	.+0      	; 0x506 <LCD_WriteCommand+0x8a>
 506:	00 00       	nop
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <LCD_Init>:
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	62 e0       	ldi	r22, 0x02	; 2
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	64 e0       	ldi	r22, 0x04	; 4
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	65 e0       	ldi	r22, 0x05	; 5
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	66 e0       	ldi	r22, 0x06	; 6
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	67 e0       	ldi	r22, 0x07	; 7
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	81 ee       	ldi	r24, 0xE1	; 225
 556:	94 e0       	ldi	r25, 0x04	; 4
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <LCD_Init+0x4c>
 560:	00 c0       	rjmp	.+0      	; 0x562 <LCD_Init+0x56>
 562:	00 00       	nop
 564:	83 e3       	ldi	r24, 0x33	; 51
 566:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 56a:	82 e3       	ldi	r24, 0x32	; 50
 56c:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 570:	88 e2       	ldi	r24, 0x28	; 40
 572:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 576:	8c e0       	ldi	r24, 0x0C	; 12
 578:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 582:	86 e0       	ldi	r24, 0x06	; 6
 584:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 58e:	80 e8       	ldi	r24, 0x80	; 128
 590:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 594:	08 95       	ret

00000596 <LCD_WriteChar>:
 596:	cf 93       	push	r28
 598:	c8 2f       	mov	r28, r24
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	9c 2f       	mov	r25, r28
 5bc:	90 7f       	andi	r25, 0xF0	; 240
 5be:	8f 70       	andi	r24, 0x0F	; 15
 5c0:	89 2b       	or	r24, r25
 5c2:	8b bb       	out	0x1b, r24	; 27
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 5ce:	8f e9       	ldi	r24, 0x9F	; 159
 5d0:	9f e0       	ldi	r25, 0x0F	; 15
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_WriteChar+0x3c>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_WriteChar+0x42>
 5d8:	00 00       	nop
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	63 e0       	ldi	r22, 0x03	; 3
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 5e4:	2b b3       	in	r18, 0x1b	; 27
 5e6:	30 e1       	ldi	r19, 0x10	; 16
 5e8:	c3 9f       	mul	r28, r19
 5ea:	c0 01       	movw	r24, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	92 2f       	mov	r25, r18
 5f0:	9f 70       	andi	r25, 0x0F	; 15
 5f2:	89 2b       	or	r24, r25
 5f4:	8b bb       	out	0x1b, r24	; 27
 5f6:	41 e0       	ldi	r20, 0x01	; 1
 5f8:	63 e0       	ldi	r22, 0x03	; 3
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 600:	8f e3       	ldi	r24, 0x3F	; 63
 602:	9c e9       	ldi	r25, 0x9C	; 156
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <LCD_WriteChar+0x6e>
 608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_WriteChar+0x74>
 60a:	00 00       	nop
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	63 e0       	ldi	r22, 0x03	; 3
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 616:	8f e1       	ldi	r24, 0x1F	; 31
 618:	9e e4       	ldi	r25, 0x4E	; 78
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_WriteChar+0x84>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_WriteChar+0x8a>
 620:	00 00       	nop
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <LCD_WriteString>:
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	fc 01       	movw	r30, r24
 62e:	80 81       	ld	r24, Z
 630:	88 23       	and	r24, r24
 632:	59 f0       	breq	.+22     	; 0x64a <LCD_WriteString+0x24>
 634:	8f 01       	movw	r16, r30
 636:	c0 e0       	ldi	r28, 0x00	; 0
 638:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteChar>
 63c:	cf 5f       	subi	r28, 0xFF	; 255
 63e:	f8 01       	movw	r30, r16
 640:	ec 0f       	add	r30, r28
 642:	f1 1d       	adc	r31, r1
 644:	80 81       	ld	r24, Z
 646:	81 11       	cpse	r24, r1
 648:	f7 cf       	rjmp	.-18     	; 0x638 <LCD_WriteString+0x12>
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	08 95       	ret

00000652 <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row , uint8 col)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	00 d0       	rcall	.+0      	; 0x658 <LCD_GoToLocation+0x6>
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
	uint8 Loc[2] = {0x80 , 0xc0};
 65c:	90 e8       	ldi	r25, 0x80	; 128
 65e:	99 83       	std	Y+1, r25	; 0x01
 660:	90 ec       	ldi	r25, 0xC0	; 192
 662:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(Loc[row]+col);
 664:	fe 01       	movw	r30, r28
 666:	e8 0f       	add	r30, r24
 668:	f1 1d       	adc	r31, r1
 66a:	81 81       	ldd	r24, Z+1	; 0x01
 66c:	86 0f       	add	r24, r22
 66e:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
}
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0X01);
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
 682:	08 95       	ret

00000684 <inti_of_program>:
uint8 x=1;

/*ask for password*/
void inti_of_program(void)
{
	while(n!='1');
 684:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 688:	81 33       	cpi	r24, 0x31	; 49
 68a:	f1 f7       	brne	.-4      	; 0x688 <inti_of_program+0x4>
	while(x!=0)
 68c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <x>
 690:	88 23       	and	r24, r24
 692:	61 f1       	breq	.+88     	; 0x6ec <inti_of_program+0x68>
	{
		if(x==1)
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	49 f4       	brne	.+18     	; 0x6aa <inti_of_program+0x26>
		{
			LCD_Clear(); /*clear the LCD*/
 698:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_Clear>
			LCD_WriteCommand(0x80); /*make courser reach first row and first coloum*/
 69c:	80 e8       	ldi	r24, 0x80	; 128
 69e:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
			LCD_WriteString("password:"); /*write on the LCD*/
 6a2:	81 e7       	ldi	r24, 0x71	; 113
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 13 03 	call	0x626	; 0x626 <LCD_WriteString>
		}
		x++;
 6aa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <x>
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <x>
		key = KeyPad_GetValue();
 6b4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <KeyPad_GetValue>
 6b8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <key>
		delaycounter(); /*Make delay of keypad*/
 6bc:	0e 94 49 00 	call	0x92	; 0x92 <delaycounter>
		
		if((key >= '0') && (key <= '9'))
 6c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <key>
 6c4:	90 ed       	ldi	r25, 0xD0	; 208
 6c6:	98 0f       	add	r25, r24
 6c8:	9a 30       	cpi	r25, 0x0A	; 10
 6ca:	40 f4       	brcc	.+16     	; 0x6dc <inti_of_program+0x58>
		{
			LCD_WriteChar(key);
 6cc:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteChar>
			if(x==5)
 6d0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <x>
 6d4:	85 30       	cpi	r24, 0x05	; 5
 6d6:	11 f4       	brne	.+4      	; 0x6dc <inti_of_program+0x58>
			{
				x=0;
 6d8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <x>
			}
		}
		SPI_TranSiver(key);
 6dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <key>
 6e0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <SPI_TranSiver>

/*ask for password*/
void inti_of_program(void)
{
	while(n!='1');
	while(x!=0)
 6e4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <x>
 6e8:	81 11       	cpse	r24, r1
 6ea:	d4 cf       	rjmp	.-88     	; 0x694 <inti_of_program+0x10>
 6ec:	08 95       	ret

000006ee <true_password>:
}


void true_password()
{
	if (n=='2')
 6ee:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 6f2:	82 33       	cpi	r24, 0x32	; 50
 6f4:	39 f4       	brne	.+14     	; 0x704 <true_password+0x16>
	{
		LCD_WriteCommand(0x80); /*make courser reach first row and first coloum*/
 6f6:	80 e8       	ldi	r24, 0x80	; 128
 6f8:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
		LCD_WriteString("true password"); /*write on the LCD*/
 6fc:	8b e7       	ldi	r24, 0x7B	; 123
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 13 03 	call	0x626	; 0x626 <LCD_WriteString>
 704:	08 95       	ret

00000706 <false_password>:
}


void false_password()
{
	if (n=='3')
 706:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 70a:	83 33       	cpi	r24, 0x33	; 51
 70c:	81 f4       	brne	.+32     	; 0x72e <false_password+0x28>
	{
		LCD_WriteCommand(0x80); /*make courser reach first row and first coloum*/
 70e:	80 e8       	ldi	r24, 0x80	; 128
 710:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
		LCD_WriteString("wrong password"); /*write on the LCD*/
 714:	89 e8       	ldi	r24, 0x89	; 137
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 13 03 	call	0x626	; 0x626 <LCD_WriteString>
 71c:	2f ef       	ldi	r18, 0xFF	; 255
 71e:	83 ed       	ldi	r24, 0xD3	; 211
 720:	90 e3       	ldi	r25, 0x30	; 48
 722:	21 50       	subi	r18, 0x01	; 1
 724:	80 40       	sbci	r24, 0x00	; 0
 726:	90 40       	sbci	r25, 0x00	; 0
 728:	e1 f7       	brne	.-8      	; 0x722 <false_password+0x1c>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <false_password+0x26>
 72c:	00 00       	nop
 72e:	08 95       	ret

00000730 <reset_a_3times>:
	}
}

void reset_a_3times()
{
	if (n=='4')
 730:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 734:	84 33       	cpi	r24, 0x34	; 52
 736:	79 f4       	brne	.+30     	; 0x756 <reset_a_3times+0x26>
	{
		LCD_WriteCommand(0x80); /*make courser reach first row and first coloum*/
 738:	80 e8       	ldi	r24, 0x80	; 128
 73a:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_WriteCommand>
		LCD_WriteString("wrong password "); /*write on the LCD*/
 73e:	88 e9       	ldi	r24, 0x98	; 152
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 13 03 	call	0x626	; 0x626 <LCD_WriteString>
		LCD_GoToLocation(1,0);
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 29 03 	call	0x652	; 0x652 <LCD_GoToLocation>
		LCD_WriteString("3 times reset "); /*write on the LCD*/
 74e:	88 ea       	ldi	r24, 0xA8	; 168
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 13 03 	call	0x626	; 0x626 <LCD_WriteString>
 756:	08 95       	ret

00000758 <main>:

#include "Main.h"
extern uint8 n;
int main(void)
{
	SPI_Slave_Init();
 758:	0e 94 c0 03 	call	0x780	; 0x780 <SPI_Slave_Init>
	LCD_Init();
 75c:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_Init>
	
	KeyPad_Init();
 760:	0e 94 98 01 	call	0x330	; 0x330 <KeyPad_Init>
	while(1)
	{
		n= SPI_TranSiver('2');
 764:	82 e3       	ldi	r24, 0x32	; 50
 766:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <SPI_TranSiver>
 76a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__data_end>
		inti_of_program();
 76e:	0e 94 42 03 	call	0x684	; 0x684 <inti_of_program>
		true_password();
 772:	0e 94 77 03 	call	0x6ee	; 0x6ee <true_password>
		false_password();
 776:	0e 94 83 03 	call	0x706	; 0x706 <false_password>
		reset_a_3times();
 77a:	0e 94 98 03 	call	0x730	; 0x730 <reset_a_3times>
 77e:	f2 cf       	rjmp	.-28     	; 0x764 <main+0xc>

00000780 <SPI_Slave_Init>:
	_delay_ms(30);
}
void SPI_Master_TermTrans(void)
{
	_delay_ms(30);
	DIO_SetPinValue(DIO_PORTB , DIO_PIN4 , DIO_PIN_HIGH);
 780:	41 e0       	ldi	r20, 0x01	; 1
 782:	66 e0       	ldi	r22, 0x06	; 6
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	65 e0       	ldi	r22, 0x05	; 5
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	67 e0       	ldi	r22, 0x07	; 7
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 79e:	40 e0       	ldi	r20, 0x00	; 0
 7a0:	64 e0       	ldi	r22, 0x04	; 4
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDir>
 7a8:	8d b1       	in	r24, 0x0d	; 13
 7aa:	84 64       	ori	r24, 0x44	; 68
 7ac:	8d b9       	out	0x0d, r24	; 13
 7ae:	08 95       	ret

000007b0 <SPI_TranSiver>:

uint8 SPI_TranSiver(uint8 data)
{
	uint8 rec_data = 0;
	
	SPI->SPDR1 = data;
 7b0:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT(SPI->SPSR1 , 7) == 0);
 7b2:	77 9b       	sbis	0x0e, 7	; 14
 7b4:	fe cf       	rjmp	.-4      	; 0x7b2 <SPI_TranSiver+0x2>
	
	rec_data  = SPI->SPDR1 ;
 7b6:	8f b1       	in	r24, 0x0f	; 15
	
	return rec_data;
 7b8:	08 95       	ret

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
