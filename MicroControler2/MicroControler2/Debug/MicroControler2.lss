
MicroControler2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000692  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a7b  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b24  00000000  00000000  00002343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e60  00000000  00000000  00002e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a4  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c57  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
  8a:	0c 94 0d 03 	jmp	0x61a	; 0x61a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDir>:
		case DIO_PORTC:
		PORTC = Value;
		break;
		
		case DIO_PORTD:
		PORTD = Value;
  92:	44 23       	and	r20, r20
  94:	b9 f1       	breq	.+110    	; 0x104 <DIO_SetPinDir+0x72>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	09 f0       	breq	.+2      	; 0x9c <DIO_SetPinDir+0xa>
  9a:	6b c0       	rjmp	.+214    	; 0x172 <DIO_SetPinDir+0xe0>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	89 f0       	breq	.+34     	; 0xc2 <DIO_SetPinDir+0x30>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPinDir+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	c9 f0       	breq	.+50     	; 0xd8 <DIO_SetPinDir+0x46>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	11 f1       	breq	.+68     	; 0xee <DIO_SetPinDir+0x5c>
  aa:	08 95       	ret
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x22>
  bc:	82 2b       	or	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	27 b3       	in	r18, 0x17	; 23
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x3c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x38>
  d2:	82 2b       	or	r24, r18
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	08 95       	ret
  ee:	21 b3       	in	r18, 0x11	; 17
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x68>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x64>
  fe:	82 2b       	or	r24, r18
 100:	81 bb       	out	0x11, r24	; 17
 102:	08 95       	ret
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 f0       	breq	.+36     	; 0x12c <DIO_SetPinDir+0x9a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPinDir+0x82>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	d9 f0       	breq	.+54     	; 0x144 <DIO_SetPinDir+0xb2>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	29 f1       	breq	.+74     	; 0x15c <DIO_SetPinDir+0xca>
 112:	08 95       	ret
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x8e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x8a>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDir+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDir+0xa2>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0xba>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xd2>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPinValue>:


void DIO_SetPinValue(uint8 Port ,uint8 Pin , uint8 Value)
{
	
	switch (Value)
 174:	44 23       	and	r20, r20
 176:	b9 f1       	breq	.+110    	; 0x1e6 <DIO_SetPinValue+0x72>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_SetPinValue+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_SetPinValue+0xe0>
	{
		case  DIO_PIN_HIGH :
		
		switch (Port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_SetPinValue+0x30>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPinValue+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_SetPinValue+0x46>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_SetPinValue+0x5c>
 18c:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , Pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPinValue+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPinValue+0x22>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
			break;
 1a2:	08 95       	ret
			
			case DIO_PORTB :
			SET_BIT(PORTB , Pin);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinValue+0x3c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinValue+0x38>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24
			break;
 1b8:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(PORTC , Pin);
 1ba:	25 b3       	in	r18, 0x15	; 21
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPinValue+0x52>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPinValue+0x4e>
 1ca:	82 2b       	or	r24, r18
 1cc:	85 bb       	out	0x15, r24	; 21
			break;
 1ce:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(PORTD , Pin);
 1d0:	22 b3       	in	r18, 0x12	; 18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinValue+0x68>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinValue+0x64>
 1e0:	82 2b       	or	r24, r18
 1e2:	82 bb       	out	0x12, r24	; 18
			break;
 1e4:	08 95       	ret
		break;
		
		
		case  DIO_PIN_LOW :
		
		switch (Port)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_SetPinValue+0x9a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_SetPinValue+0x82>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_SetPinValue+0xb2>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_SetPinValue+0xca>
 1f4:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , Pin);
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPinValue+0x8e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPinValue+0x8a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27
			break;
 20c:	08 95       	ret
			
			case DIO_PORTB :
			CLR_BIT(PORTB , Pin);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinValue+0xa6>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinValue+0xa2>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	88 bb       	out	0x18, r24	; 24
			break;
 224:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(PORTC , Pin);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinValue+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinValue+0xba>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21
			break;
 23c:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(PORTD , Pin);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_SetPinValue+0xd6>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_SetPinValue+0xd2>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <EEpromWriteByte>:
		i2c_write_byte(data[i]);
		i++;
	}
	i2c_write_byte('#');
	i2c_stop();
}
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	d8 2f       	mov	r29, r24
 25c:	c6 2f       	mov	r28, r22
 25e:	0e 94 56 01 	call	0x2ac	; 0x2ac <i2c_start>
 262:	80 e5       	ldi	r24, 0x50	; 80
 264:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <i2c_send_slave_address_with_write_req>
 268:	8d 2f       	mov	r24, r29
 26a:	0e 94 83 01 	call	0x306	; 0x306 <i2c_write_byte>
 26e:	8c 2f       	mov	r24, r28
 270:	0e 94 83 01 	call	0x306	; 0x306 <i2c_write_byte>
 274:	0e 94 99 01 	call	0x332	; 0x332 <i2c_stop>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <EEpromReadByte>:


unsigned char EEpromReadByte(unsigned short address)
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
	unsigned char data;
	i2c_start();
 282:	0e 94 56 01 	call	0x2ac	; 0x2ac <i2c_start>
	i2c_send_slave_address_with_write_req( 0b01010000 /*| ((address & 0x07)>>8) */);
 286:	80 e5       	ldi	r24, 0x50	; 80
 288:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <i2c_send_slave_address_with_write_req>
	i2c_write_byte((unsigned char)address);
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 83 01 	call	0x306	; 0x306 <i2c_write_byte>
	i2c_repeated_start();
 292:	0e 94 60 01 	call	0x2c0	; 0x2c0 <i2c_repeated_start>
	i2c_send_slave_address_with_read_req( 0b01010000 /*| ((address & 0x07)>>8)*/ );
 296:	80 e5       	ldi	r24, 0x50	; 80
 298:	0e 94 76 01 	call	0x2ec	; 0x2ec <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte();
 29c:	0e 94 8e 01 	call	0x31c	; 0x31c <i2c_read_byte>
 2a0:	c8 2f       	mov	r28, r24
	i2c_stop();
 2a2:	0e 94 99 01 	call	0x332	; 0x332 <i2c_stop>
	return data;
}
 2a6:	8c 2f       	mov	r24, r28
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <i2c_start>:



void i2c_start(void)
{
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);   // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
 2ac:	84 ea       	ldi	r24, 0xA4	; 164
 2ae:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));                     // Wait till start condition is transmitted
 2b0:	06 b6       	in	r0, 0x36	; 54
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <i2c_start+0x4>
	while((TWSR & 0xF8) != START_ACK);               // Check for the acknowledgment
 2b6:	81 b1       	in	r24, 0x01	; 1
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <i2c_start+0xa>
	return;
}
 2be:	08 95       	ret

000002c0 <i2c_repeated_start>:



void i2c_repeated_start(void)
{
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);      // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
 2c0:	84 ea       	ldi	r24, 0xA4	; 164
 2c2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<< TWINT)));                       // wait till restart condition is transmitted
 2c4:	06 b6       	in	r0, 0x36	; 54
 2c6:	07 fe       	sbrs	r0, 7
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <i2c_repeated_start+0x4>
	while((TWSR & 0xF8) != REP_START_ACK);              // Check for the acknowledgment
 2ca:	81 b1       	in	r24, 0x01	; 1
 2cc:	88 7f       	andi	r24, 0xF8	; 248
 2ce:	80 31       	cpi	r24, 0x10	; 16
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <i2c_repeated_start+0xa>
	return;
}
 2d2:	08 95       	ret

000002d4 <i2c_send_slave_address_with_write_req>:



void i2c_send_slave_address_with_write_req(unsigned char slave_address)
{
	TWDR = (slave_address<< 1);                    //Address and write instruction
 2d4:	88 0f       	add	r24, r24
 2d6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);                 // Clear TWI interrupt flag, Enable TWI
 2d8:	84 e8       	ldi	r24, 0x84	; 132
 2da:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));                  // Wait till complete TWDR byte transmitted
 2dc:	06 b6       	in	r0, 0x36	; 54
 2de:	07 fe       	sbrs	r0, 7
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <i2c_send_slave_address_with_write_req+0x8>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK);  // Check for the acknowledgment
 2e2:	81 b1       	in	r24, 0x01	; 1
 2e4:	88 7f       	andi	r24, 0xF8	; 248
 2e6:	88 31       	cpi	r24, 0x18	; 24
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <i2c_send_slave_address_with_write_req+0xe>
	return;
}
 2ea:	08 95       	ret

000002ec <i2c_send_slave_address_with_read_req>:



void i2c_send_slave_address_with_read_req(unsigned char slave_address)
{
	TWDR = (slave_address<< 1);                     // Address
 2ec:	88 0f       	add	r24, r24
 2ee:	83 b9       	out	0x03, r24	; 3
	TWDR |= (1<< 0);                                // read instruction
 2f0:	18 9a       	sbi	0x03, 0	; 3
	TWCR = (1<< TWINT) | (1<< TWEN);                // Clear TWI interrupt flag,Enable TWI
 2f2:	84 e8       	ldi	r24, 0x84	; 132
 2f4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<< TWINT)));                  // Wait till complete TWDR byte received
 2f6:	06 b6       	in	r0, 0x36	; 54
 2f8:	07 fe       	sbrs	r0, 7
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <i2c_send_slave_address_with_read_req+0xa>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK);   // Check for the acknowledgment
 2fc:	81 b1       	in	r24, 0x01	; 1
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	80 34       	cpi	r24, 0x40	; 64
 302:	e1 f7       	brne	.-8      	; 0x2fc <i2c_send_slave_address_with_read_req+0x10>
}
 304:	08 95       	ret

00000306 <i2c_write_byte>:



void i2c_write_byte(unsigned char byte)
{
	TWDR = byte;                            // put data in TWDR
 306:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<< TWINT) | (1<< TWEN);        // Clear TWI interrupt flag,Enable TWI
 308:	84 e8       	ldi	r24, 0x84	; 132
 30a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<< TWINT)));          // Wait till complete TWDR byte transmitted
 30c:	06 b6       	in	r0, 0x36	; 54
 30e:	07 fe       	sbrs	r0, 7
 310:	fd cf       	rjmp	.-6      	; 0x30c <i2c_write_byte+0x6>
	while((TWSR & 0xF8) != WR_BYTE_ACK);    // Check for the acknowledgment
 312:	81 b1       	in	r24, 0x01	; 1
 314:	88 7f       	andi	r24, 0xF8	; 248
 316:	88 32       	cpi	r24, 0x28	; 40
 318:	e1 f7       	brne	.-8      	; 0x312 <i2c_write_byte+0xc>
	return;
}
 31a:	08 95       	ret

0000031c <i2c_read_byte>:



unsigned char i2c_read_byte(void)
{
	TWCR = (1<< TWINT) | (1<< TWEN);             // Clear TWI interrupt flag,Enable TWI
 31c:	84 e8       	ldi	r24, 0x84	; 132
 31e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<< TWINT)));                // Wait till complete TWDR byte transmitted
 320:	06 b6       	in	r0, 0x36	; 54
 322:	07 fe       	sbrs	r0, 7
 324:	fd cf       	rjmp	.-6      	; 0x320 <i2c_read_byte+0x4>
	while((TWSR & 0xF8) != RD_BYTE_WITH_NACK);   // Check for the acknowledgment
 326:	81 b1       	in	r24, 0x01	; 1
 328:	88 7f       	andi	r24, 0xF8	; 248
 32a:	88 35       	cpi	r24, 0x58	; 88
 32c:	e1 f7       	brne	.-8      	; 0x326 <i2c_read_byte+0xa>
	return TWDR;
 32e:	83 b1       	in	r24, 0x03	; 3
}
 330:	08 95       	ret

00000332 <i2c_stop>:



void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Clear TWI interrupt flag, Put stop condition on SDA,Enable TWI
 332:	84 e9       	ldi	r24, 0x94	; 148
 334:	86 bf       	out	0x36, r24	; 54
 336:	08 95       	ret

00000338 <LCD_WriteCommand>:




void LCD_WriteCommand(uint8 cmd)
{
 338:	cf 93       	push	r28
 33a:	c8 2f       	mov	r28, r24
	
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	62 e0       	ldi	r22, 0x02	; 2
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_LOW);
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	63 e0       	ldi	r22, 0x03	; 3
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	
	PORTA = (cmd & 0XF0) | (PORTA & 0X0F);
 35a:	8b b3       	in	r24, 0x1b	; 27
 35c:	9c 2f       	mov	r25, r28
 35e:	90 7f       	andi	r25, 0xF0	; 240
 360:	8f 70       	andi	r24, 0x0F	; 15
 362:	89 2b       	or	r24, r25
 364:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_HIGH);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	8f e9       	ldi	r24, 0x9F	; 159
 372:	9f e0       	ldi	r25, 0x0F	; 15
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_WriteCommand+0x3c>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_WriteCommand+0x42>
 37a:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_LOW);
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	
	PORTA = (cmd << 4) | (PORTA & 0X0F);
 386:	2b b3       	in	r18, 0x1b	; 27
 388:	30 e1       	ldi	r19, 0x10	; 16
 38a:	c3 9f       	mul	r28, r19
 38c:	c0 01       	movw	r24, r0
 38e:	11 24       	eor	r1, r1
 390:	92 2f       	mov	r25, r18
 392:	9f 70       	andi	r25, 0x0F	; 15
 394:	89 2b       	or	r24, r25
 396:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_HIGH);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 3a2:	8f e9       	ldi	r24, 0x9F	; 159
 3a4:	9f e0       	ldi	r25, 0x0F	; 15
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <LCD_WriteCommand+0x6e>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <LCD_WriteCommand+0x74>
 3ac:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_LOW);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 3b8:	8f e1       	ldi	r24, 0x1F	; 31
 3ba:	9e e4       	ldi	r25, 0x4E	; 78
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_WriteCommand+0x84>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_WriteCommand+0x8a>
 3c2:	00 00       	nop
	
	_delay_ms(5);
	
	
	
	}
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <LCD_Init>:
	
	
	#elif LCD_MODE == 4
	
	
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_OUTPUT);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT , LCD_D4 , DIO_PIN_OUTPUT);
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT , LCD_D5 , DIO_PIN_OUTPUT);
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	65 e0       	ldi	r22, 0x05	; 5
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT , LCD_D6 , DIO_PIN_OUTPUT);
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	66 e0       	ldi	r22, 0x06	; 6
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT , LCD_D7 , DIO_PIN_OUTPUT);
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	67 e0       	ldi	r22, 0x07	; 7
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	81 ee       	ldi	r24, 0xE1	; 225
 412:	94 e0       	ldi	r25, 0x04	; 4
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	
	
	_delay_ms(100);
	
	LCD_WriteCommand(0X33);
 420:	83 e3       	ldi	r24, 0x33	; 51
 422:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_WriteCommand>
	LCD_WriteCommand(0X32);
 426:	82 e3       	ldi	r24, 0x32	; 50
 428:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_WriteCommand>
	LCD_WriteCommand(0X28);
 42c:	88 e2       	ldi	r24, 0x28	; 40
 42e:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_WriteCommand>
	LCD_WriteCommand(0X0C);
 432:	8c e0       	ldi	r24, 0x0C	; 12
 434:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_WriteCommand>
	LCD_WriteCommand(0X01);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_WriteCommand>
	LCD_WriteCommand(0X06);
 43e:	86 e0       	ldi	r24, 0x06	; 6
 440:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_WriteCommand>
	LCD_WriteCommand(0X02);
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_WriteCommand>
 44a:	08 95       	ret

0000044c <LCD_WriteChar>:




void LCD_WriteChar(uint8 data)
{
 44c:	cf 93       	push	r28
 44e:	c8 2f       	mov	r28, r24
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_LOW);
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	63 e0       	ldi	r22, 0x03	; 3
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	
	PORTA = (data & 0XF0) | (PORTA & 0X0F);
 46e:	8b b3       	in	r24, 0x1b	; 27
 470:	9c 2f       	mov	r25, r28
 472:	90 7f       	andi	r25, 0xF0	; 240
 474:	8f 70       	andi	r24, 0x0F	; 15
 476:	89 2b       	or	r24, r25
 478:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_HIGH);
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 484:	8f e9       	ldi	r24, 0x9F	; 159
 486:	9f e0       	ldi	r25, 0x0F	; 15
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <LCD_WriteChar+0x3c>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <LCD_WriteChar+0x42>
 48e:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_LOW);
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	63 e0       	ldi	r22, 0x03	; 3
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
	
	PORTA = (data << 4) | (PORTA & 0X0F);
 49a:	2b b3       	in	r18, 0x1b	; 27
 49c:	30 e1       	ldi	r19, 0x10	; 16
 49e:	c3 9f       	mul	r28, r19
 4a0:	c0 01       	movw	r24, r0
 4a2:	11 24       	eor	r1, r1
 4a4:	92 2f       	mov	r25, r18
 4a6:	9f 70       	andi	r25, 0x0F	; 15
 4a8:	89 2b       	or	r24, r25
 4aa:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_HIGH);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 4b6:	8f e3       	ldi	r24, 0x3F	; 63
 4b8:	9c e9       	ldi	r25, 0x9C	; 156
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_WriteChar+0x6e>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_WriteChar+0x74>
 4c0:	00 00       	nop
	_delay_ms(10);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT , LCD_E_PIN  , DIO_PIN_LOW);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 4cc:	8f e1       	ldi	r24, 0x1F	; 31
 4ce:	9e e4       	ldi	r25, 0x4E	; 78
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_WriteChar+0x84>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_WriteChar+0x8a>
 4d6:	00 00       	nop
	
	_delay_ms(5);
	
	
	
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <main>:
	//DDRA=0xff;
	//DDRC=0xff;
	
	//sci_initilized ();
	//EEpromInit();
	SPI_Master_Init();
 4dc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SPI_Master_Init>
	LCD_Init();
 4e0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Init>
	
	SPI_Master_InitTrans(); 
 4e4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SPI_Master_InitTrans>
	
	Received = SPI_TranSiver('1');
 4e8:	81 e3       	ldi	r24, 0x31	; 49
 4ea:	0e 94 08 03 	call	0x610	; 0x610 <SPI_TranSiver>
 4ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	
	while (1)
	{
		uint8 Rec_Handshake = SPI_TranSiver('1');
 4f2:	81 e3       	ldi	r24, 0x31	; 49
 4f4:	0e 94 08 03 	call	0x610	; 0x610 <SPI_TranSiver>
		//start_checkpassword();
		LCD_WriteChar(Rec_Handshake);
 4f8:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_WriteChar>
		
		
		Received = SPI_TranSiver('1');
 4fc:	81 e3       	ldi	r24, 0x31	; 49
 4fe:	0e 94 08 03 	call	0x610	; 0x610 <SPI_TranSiver>
 502:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
		LCD_WriteChar(Received);
 506:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_WriteChar>
		EEpromWriteByte(i, Received);
 50a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_end>
 50e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 512:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <i+0x1>
 516:	0e 94 2b 01 	call	0x256	; 0x256 <EEpromWriteByte>
 51a:	8f e3       	ldi	r24, 0x3F	; 63
 51c:	9c e9       	ldi	r25, 0x9C	; 156
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <main+0x42>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x48>
 524:	00 00       	nop
		_delay_ms(10);
		EEpromReadByte(i); // Read 0xFF from the external EEPROM
 526:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 52a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <i+0x1>
 52e:	0e 94 3f 01 	call	0x27e	; 0x27e <EEpromReadByte>
 532:	8f e3       	ldi	r24, 0x3F	; 63
 534:	9c e9       	ldi	r25, 0x9C	; 156
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <main+0x5a>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <main+0x60>
 53c:	00 00       	nop
		_delay_ms(10);
		EEpromWriteByte(0x0008, 0xFF); // Write 0xFF in the external EEPROM
 53e:	6f ef       	ldi	r22, 0xFF	; 255
 540:	88 e0       	ldi	r24, 0x08	; 8
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 2b 01 	call	0x256	; 0x256 <EEpromWriteByte>
 548:	8f e3       	ldi	r24, 0x3F	; 63
 54a:	9c e9       	ldi	r25, 0x9C	; 156
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <main+0x70>
 550:	00 c0       	rjmp	.+0      	; 0x552 <main+0x76>
 552:	00 00       	nop
		_delay_ms(10);
		EEpromReadByte(0x0008); // Read 0xFF from the external EEPROM
 554:	88 e0       	ldi	r24, 0x08	; 8
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 3f 01 	call	0x27e	; 0x27e <EEpromReadByte>
 55c:	8f e3       	ldi	r24, 0x3F	; 63
 55e:	9c e9       	ldi	r25, 0x9C	; 156
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <main+0x84>
 564:	00 c0       	rjmp	.+0      	; 0x566 <main+0x8a>
 566:	00 00       	nop
		_delay_ms(10);
		if (i<3)
 568:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 56c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <i+0x1>
 570:	03 97       	sbiw	r24, 0x03	; 3
 572:	2c f4       	brge	.+10     	; 0x57e <main+0xa2>
		Received = SPI_TranSiver('1');
 574:	81 e3       	ldi	r24, 0x31	; 49
 576:	0e 94 08 03 	call	0x610	; 0x610 <SPI_TranSiver>
 57a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
		i++;
 57e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 582:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <i+0x1>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <i+0x1>
 58c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
		if(i==4)
 590:	04 97       	sbiw	r24, 0x04	; 4
 592:	09 f0       	breq	.+2      	; 0x596 <main+0xba>
 594:	ae cf       	rjmp	.-164    	; 0x4f2 <main+0x16>
		{
		i=0;
 596:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <i+0x1>
 59a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 59e:	a9 cf       	rjmp	.-174    	; 0x4f2 <main+0x16>

000005a0 <SPI_Master_Init>:
	_delay_ms(30);
}
void SPI_Master_TermTrans(void)
{
	_delay_ms(30);
	DIO_SetPinValue(DIO_PORTB , DIO_PIN4 , DIO_PIN_HIGH);
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	66 e0       	ldi	r22, 0x06	; 6
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	65 e0       	ldi	r22, 0x05	; 5
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	67 e0       	ldi	r22, 0x07	; 7
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	64 e0       	ldi	r22, 0x04	; 4
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 5c8:	6c 9a       	sbi	0x0d, 4	; 13
 5ca:	6a 9a       	sbi	0x0d, 2	; 13
 5cc:	8d b1       	in	r24, 0x0d	; 13
 5ce:	83 60       	ori	r24, 0x03	; 3
 5d0:	8d b9       	out	0x0d, r24	; 13
 5d2:	6e 9a       	sbi	0x0d, 6	; 13
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	64 e0       	ldi	r22, 0x04	; 4
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 5de:	2f ef       	ldi	r18, 0xFF	; 255
 5e0:	86 e7       	ldi	r24, 0x76	; 118
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	21 50       	subi	r18, 0x01	; 1
 5e6:	80 40       	sbci	r24, 0x00	; 0
 5e8:	90 40       	sbci	r25, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <SPI_Master_Init+0x44>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <SPI_Master_Init+0x4e>
 5ee:	00 00       	nop
 5f0:	08 95       	ret

000005f2 <SPI_Master_InitTrans>:
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	64 e0       	ldi	r22, 0x04	; 4
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 5fc:	2f ef       	ldi	r18, 0xFF	; 255
 5fe:	86 e7       	ldi	r24, 0x76	; 118
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	21 50       	subi	r18, 0x01	; 1
 604:	80 40       	sbci	r24, 0x00	; 0
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <SPI_Master_InitTrans+0x10>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <SPI_Master_InitTrans+0x1a>
 60c:	00 00       	nop
 60e:	08 95       	ret

00000610 <SPI_TranSiver>:

uint8 SPI_TranSiver(uint8 data)
{
	uint8 rec_data = 0;
	
	SPI->SPDR1 = data;
 610:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT(SPI->SPSR1 , 7) == 0);
 612:	77 9b       	sbis	0x0e, 7	; 14
 614:	fe cf       	rjmp	.-4      	; 0x612 <SPI_TranSiver+0x2>
	
	rec_data  = SPI->SPDR1 ;
 616:	8f b1       	in	r24, 0x0f	; 15
	
	return rec_data;
 618:	08 95       	ret

0000061a <_exit>:
 61a:	f8 94       	cli

0000061c <__stop_program>:
 61c:	ff cf       	rjmp	.-2      	; 0x61c <__stop_program>
